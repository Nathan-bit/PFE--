<div class="container">
  <!-- HTML code with dynamic length display -->
  <p style="font-weight: bold;" id="postulantListTitle" class="mt-4 mb-4 text-center">Postulants List(e)s - <span id="postulantCount">0</span></p>
  <!-- Search Input -->
  <input type="text" id="searchInput" class="form-control mb-2" placeholder="Search by name">
  <!-- Filter Options -->
  <div class="row mb-2">
      <div class="col-md-3">
          <select id="filterStatus" class="form-control">
              <option value="">All Status</option>
          </select>
      </div>
      <div class="col-md-3">
          <select id="filterDomaine" class="form-control">
              <option value="">All Domains</option>
          </select>
      </div>
      <div class="col-md-3">
          <select id="filterInstitue" class="form-control">
              <option value="">All Institutes</option>
          </select>
      </div>
      <div class="col-md-3">
          <select id="filterPostulatedAt" class="form-control">
              <option value="desc">Postulated At (Recent)</option>
              <option value="asc">Postulated At (Ancient)</option>
          </select>
      </div>
  </div>
  <!-- Postulant Table -->
  <div class="table-responsive" style="padding: 10px;">
      <table class="table table-striped table-hover sortable" id="postulantTable">
          <thead class="bg-warning">
              <tr>
                  <th>Name</th>
                  <th>Email</th>
                  <th>Institute</th>
                  <th>Domain</th>
                  <th>Subject</th>
                  <th>Company</th>
                  <th>Status</th>
                  <th>Postulated At</th>
                  <th>CV</th>
                  <th>Actions</th>
              </tr>
          </thead>
          <tbody id="postulantList">
              <!-- Postulant data will be dynamically populated here -->
          </tbody>
      </table>
  </div>
  <!-- Pagination Controls -->
  <div id="pagination" class="mt-4">
      <!-- Pagination controls will be dynamically populated here -->
  </div>
</div>
<!-- Bootstrap JS (Optional) -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<!-- Your JavaScript Code -->
<script>
  document.addEventListener('DOMContentLoaded', async () => {
      // Fetch postulants data
      const postData = await fetchPostulants();

      // Populate filter options and render postulant data
      populateFilterOptions(postData.postulant);
      renderPostulantData(postData.postulant, document.getElementById('postulantList'));

      // Add event listener for search input
      document.getElementById('searchInput').addEventListener('input', () => {
          filterPostulants();
      });

      // Add event listeners for filter select elements
      document.getElementById('filterStatus').addEventListener('change', () => {
          filterPostulants();
      });
      document.getElementById('filterInstitue').addEventListener('change', () => {
          filterPostulants();
      });
      document.getElementById('filterDomaine').addEventListener('change', () => {
          filterPostulants();
      });
      document.getElementById('filterPostulatedAt').addEventListener('change', () => {
          filterPostulants();
      });
  });

  async function fetchPostulants() {
      // Perform fetch request to your backend API to get postulants data
      const response = await fetch('/entreprise/postulant');
      const data = await response.json();
      return data;
  }

  function renderPostulantData(postulantList, container) {
      container.innerHTML = '';
      const postulantListHTML = postulantList.map(postulant => `
          <tr>
              <td>${postulant.etudiantName}</td>
              <td>${postulant.etudiantEmail}</td>
              <td>${postulant.etudiantInstitue}</td>
              <td>${postulant.stageDomaine}</td>
              <td>${postulant.stageSujet}</td>
              <td>${postulant.entrepriseName}</td>
              <td><span style="font-weight: bold; color: ${postulant.status === 'a attente' ? 'rgb(200, 130, 13)' : postulant.status === 'acceptÃ©' ? 'green' : 'red'}">${postulant.status}</span></td>
              <td>${new Date(postulant.postulatedAt).toLocaleString('fr-FR', {
                  day: 'numeric',
                  month: 'long',
                  year: 'numeric',
                  hour: 'numeric',
                  minute: 'numeric',
                  second: 'numeric',
                  hour12: false
              })}</td>
              <td><a href="${postulant.CVPath}" target="_blank">Open CV</a></td>
              <td><a href="/entreprise/postulant_detail?etudiantEmail=${postulant.etudiantEmail}&stageId=${postulant.stageId}" class="btn btn-outline-dark">View Details</a></td>
          </tr>
      `).join('');
      container.innerHTML = postulantListHTML;
  }

  function populateFilterOptions(postulants) {
      const filterStatusElement = document.getElementById('filterStatus');
      const filterInstitueElement = document.getElementById('filterInstitue');
      const filterDomaineElement = document.getElementById('filterDomaine');

      const uniqueStatuses = new Set();
      const uniqueInstitues = new Set();
      const uniqueDomaines = new Set();
      // Extract unique values for status, etudiantInstitue, and stageDomaine
      postulants.forEach(postulant => {
          uniqueStatuses.add(postulant.status.toUpperCase());
          uniqueInstitues.add(postulant.etudiantInstitue.toUpperCase());
          uniqueDomaines.add(postulant.stageDomaine.toUpperCase());
      });

      // Populate filter options for status
      [...uniqueStatuses].sort().forEach(status => {
          const option = document.createElement('option');
          option.value = status;
          option.textContent = status;
          filterStatusElement.appendChild(option);
      });

      // Populate filter options for etudiantInstitue
      [...uniqueInstitues].sort().forEach(institue => {
          const option = document.createElement('option');
          option.value = institue;
          option.textContent = institue;
          filterInstitueElement.appendChild(option);
      });

      // Populate filter options for stageDomaine
      [...uniqueDomaines].sort().forEach(domaine => {
          const option = document.createElement('option');
          option.value = domaine;
          option.textContent = domaine;
          filterDomaineElement.appendChild(option);
      });
  }

  async function filterPostulants() {
      const postData = await fetchPostulants(); // Fetch postulants data
      const searchTerm = document.getElementById('searchInput').value.trim().toLowerCase();
      const filterStatus = document.getElementById('filterStatus').value.toUpperCase();
      const filterInstitue = document.getElementById('filterInstitue').value.toUpperCase();
      const filterDomaine = document.getElementById('filterDomaine').value.toUpperCase();
      const filterPostulatedAt = document.getElementById('filterPostulatedAt').value;

      const filteredPostulants = postData.postulant.filter(postulant => {
          return (
              (searchTerm === '' ||
                  postulant.etudiantName.toLowerCase().includes(searchTerm) ||
                    postulant.etudiantEmail.toLowerCase().includes(searchTerm) ||
                    postulant.etudiantInstitue.toLowerCase().includes(searchTerm) ||
                    postulant.stageDomaine.toLowerCase().includes(searchTerm) ||
                    postulant.stageSujet.toLowerCase().includes(searchTerm) ||
                    postulant.entrepriseName.toLowerCase().includes(searchTerm) ||
                    postulant.status.toLowerCase().includes(searchTerm)) &&
                (filterStatus === '' || postulant.status.toUpperCase() === filterStatus) &&
                (filterInstitue === '' || postulant.etudiantInstitue.toUpperCase() === filterInstitue) &&
                (filterDomaine === '' || postulant.stageDomaine.toUpperCase() === filterDomaine)
            );
        });

        // Apply sorting based on Postulated At
        if (filterPostulatedAt === 'asc') {
            filteredPostulants.sort((a, b) => new Date(a.postulatedAt) - new Date(b.postulatedAt));
        } else if (filterPostulatedAt === 'desc') {
            filteredPostulants.sort((a, b) => new Date(b.postulatedAt) - new Date(a.postulatedAt));
        }

        // Render the filtered postulant data
        renderPostulantData(filteredPostulants, document.getElementById('postulantList'));

        // Update the postulant count
        document.getElementById('postulantCount').textContent = filteredPostulants.length;
    }
</script>