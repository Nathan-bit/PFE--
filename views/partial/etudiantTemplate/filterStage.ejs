<link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">
<script src="node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<body>
    
    <script>
        // ... (existing code) ...
        let total;

        function populateFilterOptions(stages, filterElementId, propertyName) {
    const filterElement = document.getElementById(filterElementId);
    filterElement.innerHTML = '<option value="">Tous les ' + filterElementId.replace('Filter', '') + '</option>'; // Clear previous options and add the default option

    const uniqueValues = new Set(stages.map(stage => stage[propertyName]));
    uniqueValues.forEach(value => {
        // Check if the option already exists
        if (!Array.from(filterElement.options).some(option => option.value === value)) {
            const option = document.createElement('option');
            option.value = value;
            option.textContent = value;
            filterElement.appendChild(option);
        }
    });
}

        // Function to create pagination links
        function createPaginationLinks(currentPage, totalPages) {
            const paginationContainer = document.getElementById('stagePagination');
            paginationContainer.innerHTML = ''; // Clear previous pagination links

            // Create link for the first page
            const firstPageLink = document.createElement('li');
            firstPageLink.classList.add('page-item');
            const firstPageLinkAnchor = document.createElement('a');
            firstPageLinkAnchor.classList.add('page-link');
            firstPageLinkAnchor.href = '#';
            firstPageLinkAnchor.textContent = '<<';
            firstPageLinkAnchor.addEventListener('click', () => fetchStages(1));
            firstPageLink.appendChild(firstPageLinkAnchor);
            paginationContainer.appendChild(firstPageLink);

            // Create links for previous pages
            for (let i = Math.max(1, currentPage - 2); i < currentPage; i++) {
                const pageLink = document.createElement('li');
                pageLink.classList.add('page-item');
                const pageLinkAnchor = document.createElement('a');
                pageLinkAnchor.classList.add('page-link');
                pageLinkAnchor.href = '#';
                pageLinkAnchor.textContent = i;
                pageLinkAnchor.addEventListener('click', () => fetchStages(i));
                pageLink.appendChild(pageLinkAnchor);
                paginationContainer.appendChild(pageLink);
            }

            // Create link for the current page
            const currentPageLink = document.createElement('li');
            currentPageLink.classList.add('page-item', 'active');
            const currentPageLinkAnchor = document.createElement('a');
            currentPageLinkAnchor.classList.add('page-link');
            currentPageLinkAnchor.href = '#';
            currentPageLinkAnchor.textContent = currentPage;
            currentPageLink.appendChild(currentPageLinkAnchor);
            paginationContainer.appendChild(currentPageLink);

            // Create links for next pages
            for (let i = currentPage + 1; i <= Math.min(currentPage + 2, totalPages); i++) {
                const pageLink = document.createElement('li');
                pageLink.classList.add('page-item');
                const pageLinkAnchor = document.createElement('a');
                pageLinkAnchor.classList.add('page-link');
                pageLinkAnchor.href = '#';
                pageLinkAnchor.textContent = i;
                pageLinkAnchor.addEventListener('click', () => fetchStages(i));
                pageLink.appendChild(pageLinkAnchor);
                paginationContainer.appendChild(pageLink);
            }

            // Create link for the last page
            const lastPageLink = document.createElement('li');
            lastPageLink.classList.add('page-item');
            const lastPageLinkAnchor = document.createElement('a');
            lastPageLinkAnchor.classList.add('page-link');
            lastPageLinkAnchor.href = '#';
            lastPageLinkAnchor.textContent = '>>';
            lastPageLinkAnchor.addEventListener('click', () => fetchStages(totalPages));
            lastPageLink.appendChild(lastPageLinkAnchor);
            paginationContainer.appendChild(lastPageLink);
        }
      /*   page = 1, limit = 9 */
        function fetchStages( page = 1, limit = 18) {  
    const domainFilter = document.getElementById('domainFilter').value;
    const nomFilter = document.getElementById('nomFilter').value;
    const titreFilter = document.getElementById('titreFilter').value;
    const stateFilter = document.getElementById('stateFilter').value;
    const searchInput = document.getElementById('searchInput').value;
    const sortOrder = document.getElementById('sortFilter').value; // Get the selected sort order


   /*  let url = `/etudiant/All?sortBy=createdAt&sortOrder=${sortOrder}`;

    if (domainFilter) {
        url += `&Domaine=${encodeURIComponent(domainFilter)}`;
    }
    if (nomFilter) {
        url += `&Nom=${encodeURIComponent(nomFilter)}`;
    }
    if (titreFilter) {
        url += `&Titre=${encodeURIComponent(titreFilter)}`;
    }
    if (stateFilter) {
        url += `&State=${encodeURIComponent(stateFilter)}`;
    }
    if (searchInput) {
        url += `&search=${encodeURIComponent(searchInput)}`;
    } */


    let url = `/etudiant/All?page=${page}&limit=${limit}&sortBy=createdAt&sortOrder=${sortOrder}`; 

    if (domainFilter) {
        url += `&Domaine=${encodeURIComponent(domainFilter)}`;
    }
    if (nomFilter) {
        url += `&Nom=${encodeURIComponent(nomFilter)}`;
    }
    if (titreFilter) {
        url += `&Titre=${encodeURIComponent(titreFilter)}`;
    }
    if (stateFilter) {
        url += `&State=${encodeURIComponent(stateFilter)}`;
    }
    if (searchInput) {
        url += `&search=${encodeURIComponent(searchInput)}`;
    }
 

    fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error("Network response was not ok");
            }
            return response.json();
        })
        .then(data => {
            const { stages, pagination } = data;
            total=stages.length;
            const stageGrid = document.getElementById("stageGrid");
            stageGrid.innerHTML = ""; // Clear previous stage items

            // Store the selected filter values
            const selectedDomain = document.getElementById('domainFilter').value;
            const selectedNom = document.getElementById('nomFilter').value;
            const selectedTitre = document.getElementById('titreFilter').value;
            const selectedState = document.getElementById('stateFilter').value;

            // Populate filter options dynamically
            populateFilterOptions(stages, "domainFilter", "Domaine");
            populateFilterOptions(stages, "nomFilter", "Nom");
            populateFilterOptions(stages, "titreFilter", "Titre");
            populateFilterOptions(stages, "stateFilter", "State");

            // Set the previously selected filter values
            document.getElementById('domainFilter').value = selectedDomain;
            document.getElementById('nomFilter').value = selectedNom;
            document.getElementById('titreFilter').value = selectedTitre;
            document.getElementById('stateFilter').value = selectedState;

            // ... (existing stage item creation code) ...
           
              // Loop through each stage and create grid item
              stages.forEach((stage) => {
                  const stageItem = document.createElement("div");
              /*     stageItem.classList.add("col-md-10");   */
            

                  stageItem.classList.add("card","animate__animated", "animate__fadeInUp");

                
                  const longDescription = stage.Description; // Use the original description for full text
               
                  const dateFin = new Date(stage.DateFin);
                  const dateDebut = new Date(stage.DateDebut);
                  const formattedDateFin = dateFin.toLocaleDateString("fr-FR", { day: "numeric", month: "long", year: "numeric" });
                  const formattedDateDebut = dateDebut.toLocaleDateString("fr-FR", { day: "numeric", month: "long", year: "numeric" });

                  const createdAt = new Date(stage.createdAt);
                  const timeSinceCreated = getTimeSinceCreated(createdAt);

                  const currentTime = new Date();
                  const timeDifference = currentTime.getTime() - createdAt.getTime();
                  let timeString = "";

                  if (timeDifference < 60000) {
                      const seconds = Math.floor(timeDifference / 1000);
                      timeString = `${seconds} second${seconds !== 1 ? "s" : ""}`;
                  } else if (timeDifference < 3600000) {
                      const minutes = Math.floor(timeDifference / 60000);
                      timeString = `${minutes} minute${minutes !== 1 ? "s" : ""}`;
                  } else if (timeDifference < 86400000) {
                      const hours = Math.floor(timeDifference / 3600000);
                      timeString = `${hours} heure${hours !== 1 ? "s" : ""}`;
                  } else {
                      const days = Math.floor(timeDifference / 86400000);
                      timeString = `${days} jour${days !== 1 ? "s" : ""}`;
                  }

                  stageItem.innerHTML = `
                 
                      <div class="card-body">
                          <span class="time-since-created">Publi√© ${timeSinceCreated}</span>
                          <h5 class="card-title" style="text-transform: uppercase; text-align: center;"> <strong >${stage.Domaine}</strong> </h5>
                          <hr>
                          <h5 class="card-title"> Chez : ${stage.Nom}</h5>
                          <h5 class="card-title"> Titre : ${stage.Titre}</h5>
                          <p class="card-text"><strong>Domaine:</strong> ${stage.Libelle}</p>
                          <details class="description-wrapper">
                           <summary><strong>Description :</strong></summary>
                
                              <p class="long-description">${longDescription}</p>
                          </details>
                          <p class="card-text"><strong>Niveau:</strong> ${stage.Niveau}</p>
                          <p class="card-text"><strong>Nombre de poste:</strong> ${stage.PostesVacants}</p>
                          <p class="card-text"><strong>Lieu:</strong> ${stage.State}</p>
                          <hr>
                          <p class="card-text"><strong>Date debut:</strong> ${formattedDateDebut}</p>
                          <p class="card-text"><strong>Date fin:</strong> ${formattedDateFin}</p>
                          <!-- Add more stage properties as needed -->
                          
                         
                          <a href="/postulate/${stage.id}" class="btn btn btn-outline-dark mybtn">Postuler maintenant</a>
                         
                      </div>
                      <div class="card-footer">
                           <span class="published-time">Publi√© il y a ${timeString}</span>
                         </div>
                         <hr>
                
                        
              `;

              stageGrid.appendChild(stageItem);
              });
            // Create pagination links
            createPaginationLinks(pagination.currentPage, pagination.totalPages);
        })
        .catch(error => console.error("Error fetching stages:", error.message));
}

// Event listeners for filter changes and search input
document.getElementById("domainFilter").addEventListener("change", () => fetchStages());
document.getElementById("nomFilter").addEventListener("change", () => fetchStages());
document.getElementById("titreFilter").addEventListener("change", () => fetchStages());
document.getElementById("stateFilter").addEventListener("change", () => fetchStages());
document.getElementById("searchInput").addEventListener("input", () => fetchStages());
document.getElementById("sortFilter").addEventListener("change", () => fetchStages());


function getTimeSinceCreated(createdAt) {
          const now = new Date();
          const diffMs = now.getTime() - createdAt.getTime();
          const diffSeconds = Math.floor(diffMs / 1000);
          const diffMinutes = Math.floor(diffSeconds / 60);
          const diffHours = Math.floor(diffMinutes / 60);
          const diffDays = Math.floor(diffHours / 24);

          if (diffSeconds < 60) {
              return `il y a ${diffSeconds} secondes`;
          } else if (diffMinutes < 60) {
              return `il y a ${diffMinutes} minutes`;
          } else if (diffHours < 24) {
              return `il y a ${diffHours} heures`;
          } else {
              return `il y a ${diffDays} jours`;
          }
      }
// Initial fetch of stages
fetchStages();

</script>